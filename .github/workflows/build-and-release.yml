name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libopencv-dev zip patchelf

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress -y
          choco install opencv --no-progress -y

      - name: Configure CMake (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DOpenCV_DIR="C:/tools/opencv/build"

      - name: Build
        run: cmake --build build --config Release

      - name: Prepare artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p dist/lib
          cp build/motion_detection dist/motion_detection
          ldd dist/motion_detection | awk '/opencv/ {print $3}' | sort -u > opencv_libs.txt
          while read -r lib; do
            if [ -n "$lib" ] && [ -f "$lib" ]; then
              cp -L "$lib" dist/lib/
            fi
          done < opencv_libs.txt
          patchelf --set-rpath '$ORIGIN/lib' dist/motion_detection
          strip --strip-unneeded dist/motion_detection || true
          (cd dist && zip -r ../motion_detection-ubuntu-latest.zip .)

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Copy-Item -Path "build/Release/motion_detection.exe" -Destination "dist/motion_detection.exe" -Force
          $opencvBin = 'C:\tools\opencv\build\x64\vc16\bin'
          Copy-Item -Path (Join-Path $opencvBin 'opencv_world*.dll') -Destination dist -Force
          $ffmpegDll = Join-Path $opencvBin 'opencv_videoio_ffmpeg*.dll'
          if (Get-ChildItem $ffmpegDll -ErrorAction SilentlyContinue) {
            Copy-Item -Path $ffmpegDll -Destination dist -Force
          }
          Compress-Archive -Path dist\* -DestinationPath motion_detection-windows-latest.zip -Force

      - name: Upload artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: motion_detection-ubuntu-latest
          path: motion_detection-ubuntu-latest.zip

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: motion_detection-windows-latest
          path: motion_detection-windows-latest.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded files
        run: ls -R dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
